{
  "name": "gulp-dom-src",
  "version": "0.1.1",
  "description": "Create a gulp stream from script/link tags in an HTML file.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cgross/gulp-dom-src"
  },
  "keywords": [
    "gulpplugin",
    "html",
    "dom"
  ],
  "author": {
    "name": "Chris Gross"
  },
  "license": "MIT",
  "dependencies": {
    "vinyl-fs": "~0.1.0",
    "cheerio": "~0.13.1"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "should": "~3.1.3",
    "through2": "~0.4.1",
    "buffer-equal": "0.0.0"
  },
  "readme": "# gulp-dom-src [![Build Status](https://travis-ci.org/cgross/gulp-dom-src.png)](https://travis-ci.org/cgross/gulp-dom-src)\n\n> Create a gulp stream from script, link, or any set of tags in an HTML file.\n\n## Example\n\n```js\nvar gulp = require('gulp');\nvar domSrc = require('gulp-dom-src');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\n\ngulp.task('default', function () {\n\tdomSrc({ file: 'index.html', selector: 'script', attribute: 'src' })\n        .pipe(concat('app.full.min.js'))\n        .pipe(uglify())\n        .pipe(gulp.dest('dist/'));\n});\n```\n\n## API\n\n### domSrc(config)\n\n\n#### config.file\n\nType: `String`\n\nThe name of the HTML file to read the tags from.\n\n\n#### config.selector\n\nType: `String`\n\nAny valid CSS selector.  You can use complex selectors to allow flexible include/exclude logic for your tags.  For example, use a selector such as `script[data-concat!=\"false\"]` and put `data-concat=\"false\"` on any script tags you wish to exclude from a concat/minification stream.\n\n\n#### config.attribute\n\nType: `String`\n\nThe name of the attribute that contains the file path.  Typically `src` for `script` tags and `href` for `link`s.\n\n#### config.cwd\n\nType: `String` (Optional)\n\nThe directory where the paths in your tags are relative to.  By default, the files references in your script or link tags are assumed to be relative to the HTML file they're read from.\n\n#### config.options\n\nType: `Object` (Optional)\nDefault: `{}`\n\nOptions passed through to the underlying `vinyl-fs`.  Can include options like `read` and `buffer`.\n\nEnd-to-End Concatenation and Minification\n-------------\n\nCombine gulp-dom-src with [gulp-cheerio](https://github.com/KenPowers/gulp-cheerio) for a full concat & min workflow.\n\n```js\nvar gulp = require('gulp');\nvar domSrc = require('gulp-dom-src');\nvar concat = require('gulp-concat');\nvar cssmin = require('gulp-cssmin');\nvar uglify = require('gulp-uglify');\nvar cheerio = require('gulp-cheerio');\n\ngulp.task('css', function() {\n    return domSrc({file:'index.html',selector:'link',attribute:'href'})\n    \t.pipe(concat('app.full.min.css'))\n        .pipe(cssmin())\n        .pipe(gulp.dest('dist/'));\n});\n\ngulp.task('js', function() {\n    return domSrc({file:'index.html',selector:'script',attribute:'src'})\n        .pipe(concat('app.full.min.js'))\n        .pipe(uglify())\n        .pipe(gulp.dest('dist/'));\n});\n\ngulp.task('indexHtml', function() {\n    return gulp.src('index.html')\n        .pipe(cheerio(function ($) {\n            $('script').remove();\n            $('link').remove();\n            $('body').append('<script src=\"app.full.min.js\"></script>');\n            $('head').append('<link rel=\"stylesheet\" href=\"app.full.min.css\">');\n        }))\n        .pipe(gulp.dest('dist/'));\n});\n```\n\nRelease History\n-------------\n* 3/17/2014 - v0.1.1 - Added `cwd` option.\n* 3/08/2014 - v0.1.0 - Initial release.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cgross/gulp-dom-src/issues"
  },
  "homepage": "https://github.com/cgross/gulp-dom-src",
  "_id": "gulp-dom-src@0.1.1",
  "_from": "gulp-dom-src@~0.1.1"
}
